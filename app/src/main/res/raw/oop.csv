c1,Introduction of OOP,What is OOP?%nOOP is a design philosophy. It stands for Object Oriented Programming. Object-Oriented Programming (OOP) uses a different set of programming languages than old procedural programming languages (C%cPascal etc.). Everything in OOP is grouped as self sustainable objects. Hence you gain reusability by means of four main object-oriented programming concepts.
c1,Introduction of OOP,In order to clearly understand the object orientation model%clet’s take your hand as an example.%nThe hand is a class. Your body has two objects of the type hand named left hand and right hand. Their main functions are controlled or managed by a set of electrical signals sent through your shoulders (through an interface). So the shoulder is an interface that your body uses to interact with your hands. The hand is a well-architected class. The hand is being reused to create the left hand and the right hand by slightly changing the properties of it.
c2,Classes,What is a Class?%nA class is simply a representation of a type of object. It is the blueprint or plan or template that describes the details of an object. A class is the blueprint from which the individual objects are created. Class is composed of three things a name%cattributes and operations.%npublic class Student%n{%n}
c2,Classes,According to the sample given below%c we can say that the Student object named objectStudent has been created out of the Student class.%nStudent objectStudent = new Student();%nIn real world you'll often find many individual objects all of the same kind.
c2,Classes,As an example%n%n there may be thousands of other bicycles in existence all of the same make and model. Each bicycle has built from the same blueprint. In object-oriented terms we say that the bicycle is an instance of the class of objects known as bicycles.
c2,Classes,In the software world though you may not have realized it you have already used classes.%n For example%n%n the TextBox control you always used is made out of the TextBox class which defines its appearance and capabilities. Each time you drag a TextBox control you are actually creating a new instance of the TextBox class.
c3,Association and Composition,What is Association?%nAssociation is a (%ia%i) relationship between two classes. It allows one object instance to cause another to perform an action on its behalf.Association is the more general term that define the relationship between two classes where as the aggregation and composition are relatively special.
c3,Association and Composition,public class StudentRegistrar%n{%n    public StudentRegistrar ();%n    {%n        new RecordManager().Initialize();%n    }%n}
c3,Association and Composition,In this case we can say that%c there is an association between StudentRegistrar and RecordManager or there is a directional association from StudentRegistrar to RecordManager or StudentRegistrar use a (%iUse%i) RecordManager. Since a direction is explicitly specified in this case the controller class is the StudentRegistrar.
c3,Association and Composition,In real-world programs an object is made up of several parts. For example a car is made up of several parts (objects) like engine%c wheel%c door etc. This kind of whole part relationship is known as composition which is also known as %ihas-a%i relationship.
c3,Association and Composition,#include<iostream>%nusing namespace std;%nclass Engine%n{%npublic:%nint power;%n};%nclass Car%n{%npublic:%nEngine e;%nstring company;%nstring color;%nvoid show_details()%n{%ncout<<%iCompany is:%i<<company<<endl;%ncout<<%iColor is:%i<<color<<endl;%ncout<<%iEngine horse power is:%i<<e.power;%n}%n};%nint main()%n{%nCar c;%nc.e.power = 500;%nc.company = “hyundai”;%nc.color = “black”;%nc.show_details();%nreturn 0;%n}
c4,Inheritance,What is Inheritance?%nThe ability of a new class to be created from an existing class by extending it is called inheritance.%n%npublic class Exception%n{%n}%npublic class IOException : Exception%n{%n}
c4,Inheritance,According to the above example%c the new class (IOException) which is called the derived class or subclass inherits the members of an existing class (Exception) which is called the base class or super-class. The class IOException can extend the functionality of the class Exception by adding new types and methods and by overriding existing ones.
c4,Inheritance,Just like abstraction is closely related with generalization the inheritance is closely related with specialization. It is important to discuss those two concepts together with generalization to better understand and to reduce the complexity.
c4,Inheritance,One of the most important relationships among objects in the real world is specialization which can be described as the 'is-a' relationship. When we say that a dog is a mammal we mean that the dog is a specialized kind of mammal. It has all the characteristics of any mammal (it bears live young%c nurses with milk%c has hair) but it specializes these characteristics to the familiar characteristics of canis domesticus.
c4,Inheritance,A cat is also a mammal. As such%c we expect it to share certain characteristics with the dog that are generalized in Mammal but to differ in those characteristics that are specialized in cats.The specialization and generalization relationships are both reciprocal and hierarchical. Specialization is just the other side of the generalization coin Mammal generalizes what is common between dogs and cats%c dogs and cats specialize mammals to their own specific subtypes.
c5,Polymorphism,What is Polymorphism?%nPolymorphisms is a generic term that means many shapes. More precisely Polymorphisms means the ability to request that the same operations be performed by a wide range of different types of things.
c5,Polymorphism,At times I used to think that understanding Object Oriented Programming concepts have made it difficult since they have grouped under four main concepts while each concept is closely related with one another. Hence%c one has to be extremely careful to correctly understand each concept separately while understanding the way each related with other concepts.%nIn OOP the polymorphisms is achieved by using many different techniques named method overloading%c operator overloading%c and method overriding.
c6,Operator Overloading,What is Operator Overloading?%nThe operator overloading (less commonly known as ad-hoc polymorphisms) is a specific case of polymorphisms in which some or all of operators like +%c- or == are treated as polymorphic functions and as such have different behaviors depending on the types of its arguments.
c6,Operator Overloading,public class Complex%n{%n    private int real;%n    public int Real%n    { get { return real; } }%n    private int imaginary;%n    public int Imaginary%n    { get { return imaginary; } }%n    public Complex(int real%cint imaginary)%n    {%n        this.real = real;%n        this.imaginary = imaginary;%n    }%n    public static Complex operator +(Complex c1%cComplex c2)%n    {%n        return new Complex(c1.Real + c2.Real%cc1.Imaginary + c2.Imaginary);%n    }%n}
c6,Operator Overloading,In above example%c I have overloaded the plus operator for adding two complex numbers. There the two properties named Real and Imaginary has been declared exposing only the required get method while the object’s constructor is demanding for mandatory real and imaginary values with the user defined constructor of the class.