c1,Introduction,Introduction to Basic Data Structures and Algorithms:%n%nBefore introducing data structures we should understand that computers do store retrieve and process a large amount of data. If the data is stored in well organized way on storage media and in computer's memory then it can be accessed quickly for processing that further reduces the latency and the user is provided fast response.
c1,Introduction,Data structure introduction refers to a scheme for organizing data or in other words a data structure is an arrangement of data in computer's memory in such a way that it could make the data quickly available to the processor for required calculations. A data structure should be seen as a logical concept that must address two fundamental concerns.
c1,Introduction,First how the data will be stored and second what operations will be performed on it? As data structure is a scheme for data organization so the functional definition of a data structure should be independent of its implementation. The functional definition of a data structure is known as ADT (Abstract Data Type) which is independent of implementation.
c1,Introduction,The implementation part is left on developers who decide which technology better suits to their project needs.%n%nFor example%na stack ADT is a structure which supports operations such as push and pop. A stack can be implemented in a number of ways for example%c using an array or using a linked list.
c2,Stack,Stack:%nStack is a last-in-first-out strategy data structure; this means that the element stored in last will be removed first. Stack has specific but very useful applications; some of them are as follows:
c2,Stack,Solving Recursion - recursive calls are placed onto a stack and removed from there once they are processed.%nEvaluating postfix%nexpressions%nSolving Towers of Hanoi%nBacktracking%nDepth-first search%nConverting a decimal number into a binary number.
c2,Queue,Queue:%nQueue is a first-in-first-out data structure. The element that is added to the queue data structure first will be removed from the queue first. Dequeue priority queue and circular queue are the variants of queue data structure.
c2,Queue,Queue has the following application uses:%nAccess to shared resources (e.g. printer)%nMultiprogramming%nMessage queue%n%n(Source: https://www.geeksforgeeks.org/?p=18754)%n(Source: https://www.geeksforgeeks.org/?p=5009)
c3,Linked List,Linked list:%nLinked list data structure provides better memory management than arrays. Because linked list is allocated memory at run time so there is no waste of memory. Performance wise linked list is slower than array because there is no direct access to linked list elements.
c3,Linked List,Linked list is proved to be a useful data structure%c when the number of elements to be stored is not known ahead of time.%nThere are many flavors of linked list you will see:%nlinear%ncircular%ndoubly%ndoubly circular.
c3,Linked List,Declaring a Linked list :%nIn C language a linked list can be implemented using structure and pointers .%nstruct LinkedList{%n    int data;%n    struct LinkedList *next;%n };
c3,Linked List,Creating a Node:%nLet's define a data type of struct Linked List to make code cleaner.%n%ntypedef struct LinkedList *node; //Define node as pointer of data type struct LinkedList%nnode createNode(){%nnode temp; // declare a node%ntemp = (node)malloc(sizeof(struct LinkedList)); // allocate memory using malloc()%ntemp->next = NULL;// make next point to NULL%nreturn temp;//return the new node%n}
c3,Linked List,Traversing the list:%nThe linked list can be traversed in a while loop by using the head node as a starting reference:%nnode p;%np = head;%nwhile(p != NULL){%n    p = p->next;%n}
c4,Circular Linked List,Circular Linked List:%nIn a circularly linked list all nodes are linked in a continuous circle without using null. For lists%c with a front and a back (such as a queue) one stores a reference to the last node in the list. The next node after the last node is the first node.
c4,Circular Linked List,Advantages of Circular Linked Lists:%n1) Any node can be a starting point. We can traverse the whole list by starting from any point. We just need to stop when the first visited node is visited again.%n%n2) Useful for implementation of queue. Unlike this implementation we donâ€™t need to maintain two pointers for front and rear if we use circular linked list. We can maintain a pointer to the last inserted node and front can always be obtained as next of last.
c4,Circular Linked List,3) Circular lists are useful in applications to repeatedly go around the list.%n%nFor example%n when multiple applications are running on a PC it is common for the operating system to put the running applications on a list and then to cycle through them giving each of them a slice of time to execute and then making them wait while the CPU is given to another application.
c4,Circular Linked List,It is convenient for the operating system to use a circular list so that%c when it reaches the end of the list it can cycle around to the front of the list.%n%n (Source: https://www.geeksforgeeks.org/circular-linked-list-set-2-traversal/)
c5,Trees,Trees:%nTree is a hierarchical data structure. The very top element of a tree is called the root of the tree. Except the root element every element in a tree has a parent element%c and zero or more children elements. All elements in the left sub-tree come before the root in sorting order and all those in the right sub-tree come after the root.
c5,Trees,Tree is the most useful data structure when you have hierarchical information to store.%nFor example%n directory structure of a file system; there are many variants of tree you will come across. Some of them are Red-black tree threaded binary tree AVL tree etc.%n%n(Source: https://www.geeksforgeeks.org/print-level-order-traversal-line-line/)
c6,Heap,Heap:%nHeap is a binary tree that stores a collection of keys by satisfying heap property. Max heap and min heap are two flavors of heap data structure.
c6,Heap,The heap property for max heap is each node should be greater than or equal to each of its children. While for min heap it is each node should be smaller than or equal to each of its children. Heap data structure is usually used to implement priority queues.%n%n(Source: https://www.geeksforgeeks.org/binomial-heap-2/)