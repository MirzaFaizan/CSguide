c1,Introduction of C#,Introduction:%nWelcome to this C# tutorial. With the introduction of the .NET framework Microsoft included a new language called C# (pronounced C Sharp). C# is designed to be a simple modern general-purpose object-oriented programming language borrowing key concepts from several other languages most notably Java.
c1,Introduction of C#,C# could theoretically be compiled to machine code but in real life it's always used in combination with the .NET framework. Therefore applications written in C# requires the .NET framework to be installed on the computer running the application. While the .NET framework makes it possible to use a wide range of languages C# is sometimes referred to as THE .NET language perhaps because it was designed together with the framework.
c1,Introduction of C#,C# is an Object Oriented language and does not offer global variables or functions. Everything is wrapped in classes, even simple types like int and string, which inherits from the System.Object class.
c2,Wrting C# classes,C# classes:%nA class is a construct that enables you to create your own custom types by grouping together variables of other types methods and events.%nUnlike structs classes support inheritance a fundamental characteristic of object-oriented programming.
c2,Wrting C# classes,Declaring Classes:%nClasses are declared by using the class keyword as shown in the following example:%npublic class Customer%n{%n    //Fields properties methods and events go here%n}
c2,Wrting C# classes,The class keyword is preceded by the access level. Because public is used in this case anyone can create objects from this class. The name of the class follows the class keyword. The remainder of the definition is the class body where the behavior and data are defined. Fields properties methods and events on a class are collectively referred to as class members.
c3,Inheritance and polymorphism,Inheritance & Polymorphism:%nWhen you derive a class from a base class the derived class will inherit all members of the base class except constructors though whether the derived class would be able to access those members would depend upon the accessibility of those members in the base class. C# gives us polymorphism through inheritance.
c3,Inheritance and polymorphism,Inheritance-based polymorphism allows us to define methods in a base class and override them with derived class implementations. Thus if you have a base class object that might be holding one of several derived class objects polymorphism when properly used allows you to call a method that will work differently according to the type of derived class the object belongs to.
c3,Inheritance and polymorphism,Base class example:%nclass Animal%n{%n    public Animal()%n    {%n        Console.WriteLine(Animal constructor);%n    }%n    public void Greet()%n    {%n        Console.WriteLine(Animal says Hello);%n    }%n    public void Talk()%n    {%n       Console.WriteLine(Animal talk);%n    }%n    public virtual void Sing()%n    {%n        Console.WriteLine(Animal song);%n    }};
c3,Inheritance and polymorphism,Now see how we derive another class from this base class.%nclass Dog : Animal%n{%n    public Dog()%n    {%n        Console.WriteLine(Dog constructor);%n    }%n    public new void Talk()%n    {%n        Console.WriteLine(Dog talk);%n    }%n    public override void Sing()%n    {%n        Console.WriteLine(Dog song);%n    }%n};
c4,Exception Handling,Exception Handling:%nA C# exception is a response to an exceptional circumstance that arises while a program is running such as an attempt to divide by zero. Exceptions provide a way to transfer control from one part of a program to another. C# exception handling is built upon four keywords: try catch finally and throw.
c4,Exception Handling,try - A try block identifies a block of code for which particular exceptions is activated. It is followed by one or more catch blocks.%ncatch - A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.
c4,Exception Handling,finally - The finally block is used to execute a given set of statements whether an exception is thrown or not thrown.%nFor example%n if you open a file it must be closed whether an exception is raised or not.%nthrow - A program throws an exception when a problem shows up. This is done using a throw keyword.
c4,Exception Handling,Syntax:%ntry {%n   // statements causing exception%n} catch( ExceptionName e1 ) {%n   // error handling code%n} catch( ExceptionName e2 ) {%n   // error handling code%n} catch( ExceptionName eN ) {%n   // error handling code%n} finally {%n   // statements to be executed%n}
c5,Delegates and Events,Delegates:%nC# delegates are similar to pointers to functions in C or C++. A delegate is a reference type variable that holds the reference to a method. The reference can be changed at runtime.%nDelegates are especially used for implementing events and the call-back methods. All delegates are implicitly derived from the System.Delegate class.
c5,Delegates and Events,Declaring Delegates:%nDelegate declaration determines the methods that can be referenced by the delegate. A delegate can refer to a method which has the same signature as that of the delegate.
c5,Delegates and Events,For example:%n consider a delegate -%npublic delegate int MyDelegate (string s);
c5,Delegates and Events,Events:%nEvents are user actions such as key press clicks mouse movements etc. or some occurrence such as system generated notifications. Applications need to respond to events when they occur. For example interrupts. Events are used for inter-process communication.
c5,Delegates and Events,Declaring Events:%nTo declare an event inside a class first a delegate type for the event must be declared.%nFor example:%npublic delegate string MyDel(string str);
c6,Multithreading,Multithreading:%nA thread is defined as the execution path of a program. Each thread defines a unique flow of control. If your application involves complicated and time consuming operations then it is often helpful to set different execution paths or threads with each thread performing a particular job.
c6,Multithreading,Threads are lightweight processes. One common example of use of thread is implementation of concurrent programming by modern operating systems. Use of threads saves wastage of CPU cycle and increase efficiency of an application.
c6,Multithreading,The Main Thread:%nIn C# the System.Threading.Thread class is used for working with threads. It allows creating and accessing individual threads in a multithreaded application. The first thread to be executed in a process is called the main thread.
c6,Multithreading,When a C# program starts execution the main thread is automatically created. The threads created using the Thread class are called the child threads of the main thread. You can access a thread using the CurrentThread property of the Thread class.
c6,Multithreading,The following program demonstrates main thread execution -%nusing System;%nusing System.Threading;%nnamespace MultithreadingApplication {%n   class MainThreadProgram {%n      static void Main(string[] args) {%n         Thread th = Thread.CurrentThread;%n         th.Name = MainThread;%n         Console.WriteLine(This is {0} th.Name);%n         Console.ReadKey();%n      }%n   }%n}